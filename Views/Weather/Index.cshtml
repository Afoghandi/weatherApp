@using Microsoft.AspNetCore.Mvc.ViewFeatures
@{
    ViewData["Title"] = "Weather Search";
}

<div class="flex items-center justify-center h-screen bg-gradient-to-br from-blue-400 to-purple-600">
    <div class="bg-white text-gray-800 p-8 rounded-lg shadow-lg w-96">
        <h1 class="text-2xl font-bold mb-6 text-center text-primary">Weather Forecast</h1>


        <form method="post" id="locationForm" action="/Weather/GetWeatherAndForecast">
            <label form="city" class="block mb-2 font-semibold">Enter City Name</label>
            <input type="text" name="city" placeholder="Enter city name" class="w-full p-3 border rounded mb-6 focus:outline-none focus:ring-2 focus:ring-primary" />
            <button type="submit" class="w-full !bg-primary !text-white py-2 px-4 rounded hover:bg-blue-600 focus:ring-2 focus:ring-blue-400 focus:outline-none">Get Forecast</button>
            <button type="button" class="w-full bg-secondary text-primary py-2 px-4 rounded hover:bg-gray-300 mt-4" onclick="useMyLocation(event)">
                Use My Location
              
           
            </button>
    </form>
   
    </div>
</div>
<script>
     async function useMyLocation(event) {
        event.preventDefault();
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position) => {
                const latitude = position.coords.latitude;
                const longitude = position.coords.longitude;

                // Redirect to GetWeatherAndForecast with query params
                window.location.href = `/Weather/GetWeatherAndForecast?latitude=${latitude}&longitude=${longitude}`;
            }, (error) => {
                console.error("Error fetching location:", error.message);
                alert("Unable to fetch location. Please enable location services.");
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    }

</script>